1. Analyze Track Structure (Manually)
Most phonk tracks:

Intro: 0:00–0:04 (ambience, no hard beat)

First beat drop: ~0:04–0:08

Main groove: ~0:08 onward, with 4-bar/8-bar phrasing

Breakdown/bridge: at 0:28–0:36 or 0:40 (usually)

Final drop/chorus: after breakdown, ~0:40+

2. Recommended Beat-Aligned Animation Sequence
(Use exact audio cues—adjust these by listening, or with a DAW for precise frames.)

Step	Start (sec)	Duration (sec)	Cue/Event	Animation
Title	0	4.0	Ambience/Intro (no drums)	Typewriter "Sonic Red Dragon"
Swap	4.0	4.0	First beat drop (kick in, 1st snare)	Slide up: "Swap $S for $DRAGON"
Twist	8.0	4.0	Beat intensifies (2nd phrase)	Scale: "But there's a twist"
Fee	12.0	4.0	Next phrase, on beat	Slide from left: "10% fee on all swaps"
Lottery	16.0	6.0	After snare fill, phonk vocal sample?	3D Flip: "Every swap = lottery ticket"
Unique	22.0	6.0	Breakdown, softer/fewer elements	Dissolve: "Results are instantaneous..."
Table	28.0	10.0	Beat returns, use every 2s for table row	Alternating slide-ins for table
VRF	38.0	10.0	Final section, track peaks	Slide up + scale: Final VRF/Provable Fair

3. GPT-Readable Animation Instructions
markdown
Copy
Edit
# Animation Timing and Beat Sync Instructions

- Each animation starts exactly at the second indicated.
- Animation should finish before the next begins.
- Use the main drum "drop" or musical change for transitions.

| Time (s) | Animation                                | Text/Scene                            | Effect                          |
|----------|------------------------------------------|---------------------------------------|---------------------------------|
| 0.0      | Typewriter (center)                      | Sonic Red Dragon                      | Classic type-in, no drums yet   |
| 4.0      | Slide up                                 | Swap $S for $DRAGON                   | Slide in on first beat          |
| 8.0      | Scale animation (pop)                    | But there's a twist                   | Scale up on next phrase         |
| 12.0     | Slide in from left                       | 10% fee on all swaps                  | On snare hit/beat               |
| 16.0     | 3D flip                                 | Every swap = lottery ticket           | Use fill or vocal sample as cue |
| 22.0     | Dissolve/shimmer                         | Results are instantaneous & unique    | Softer bridge, faded in         |
| 28.0     | Alternating slide (every 2s, 5 entries)  | Probability table                     | Beat returns, use on-beat rows  |
| 38.0     | Slide up + scale                         | Provable Fairness (VRF/Chainlink)     | Final chorus, peak intensity    |

- Each "Alternating slide" should enter on the beat, starting at 28s: e.g., first row at 28.0s, next at 30.0s, etc.
- For the VRF/Provable Fairness, use glow/pulse with the last musical rise/outro.

> All animations should be tightly synced. Use `setTimeout` or `requestAnimationFrame` to trigger at these times after audio starts. If possible, check audio's `currentTime` in a render loop for frame-perfect sync.

4. How to Use This in Your Code
Update your splashSteps with start fields or make a simple array with [text, startTime].

On play, poll audioRef.current.currentTime in a render loop or use a timer per step.

Trigger the next animation when audio.currentTime >= step.start.

For the table, fire off each sub-row animation at the base + i * 2.0 seconds.

Summary/Copy-Paste Block for Your GPT or Editor
Use this exact beat-synced timing for animations in the Sonic Red Dragon splash:

0.0s: Typewriter: "Sonic Red Dragon"

4.0s: Slide up: "Swap $S for $DRAGON"

8.0s: Scale pop: "But there's a twist"

12.0s: Slide from left: "10% fee on all swaps"

16.0s: 3D flip: "Every swap = lottery ticket"

22.0s: Dissolve/shimmer: "Results are instantaneous and unique to each swap"

28.0s: Alternating slide-ins (every 2s): Each row of the probability table

38.0s: Slide up + scale: "Provable Fairness Powered by Chainlink VRF" (finale)

Animations should begin exactly at these time points, aligned to the music’s downbeats. Use the audio’s currentTime or precise timers for perfect sync.

